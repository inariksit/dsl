ModuleDecl. Module ::= "module" ObjAttr "where";
Toplevel.  Rules ::= [Toplevels];
rules      Toplevels ::= Rule | Module | Import | Pragma | Entity | Knol ;
terminator Toplevels ";";

layout toplevel;
entrypoints Rules;
comment "//" ;
comment "--" ;
comment "/*" "*/" ;
rules Pragma ::= "pragma" [KeyVal] ;
Import. Import ::= "import" ObjAttr ;
Entity.    Entity    ::= "ENTITY" ObjAttr
                         "ISA"    ObjAttr
                         Asof
                         WithExpr
                         WhereExpr;

With.      WithExpr  ::= "WITH" "{" [WithIn] "}";
rules      WithIn    ::= EqList | TraceExpr;
separator nonempty WithIn ";";

rules      TraceExpr ::= "TRACE" "{" [LogEvent] "}";
rules      LogEvent ::= Iso8601 ObjAttr ObjAttr ObjAttr BlahBlah ;
separator nonempty LogEvent ";";
separator nonempty Blah "";
rules      BlahBlah ::= [Blah] | ;
rules      Blah     ::= Numberlike | ObjAttr | JunctionList | BraceList;

layout "WITH", "TRACE", "WHERE" ;
separator nonempty EqList ";" ;

rules     WhereExpr ::= | "WHERE" "{" [WhereIn] "}" ;
rules     WhereIn   ::= ObjAttr "ISA" ObjAttr 
                      | ObjAttr "ISA" ObjAttr WithExpr
                      | EqList;
separator nonempty WhereIn ";";

EqList.      EqList ::= [KeyVal];

rules      UIdentList ::= [UIdentElem];
rules      UIdentElem ::= UIdent;
separator nonempty UIdentElem ".";

token UIdent (upper (letter | digit | '_')*) ;

rules BraceList ::= "{" [KeyVal] "}" ;
rules ArrayOfBraces ::= "[" [BraceList] "]";
separator nonempty BraceList "," ;

Knol.       Knol     ::= "KNOL" ObjAttr WithExpr;
Asof.      Asof      ::= "ASOF" DateTime ;
AsofNull.  Asof      ::= ;
rules      DateTime  ::= Iso8601 | "PRESENT" | "NOW" ;
rules      Iso8601   ::= YYYYMMDD | YYYYMMDDTHHMM;

token YYYYMMDD      ( digit digit digit digit '-'? digit digit '-'? digit digit );
token YYYYMMDDTHHMM ( digit digit digit digit '-'? digit digit '-'? digit digit 'T' digit digit digit digit );

rules      RuleDef   ::= RuleNum | RuleID | RuleName
                       | RuleNum   RuleID 
                       | RuleNum            RuleName
                       |           RuleID   RuleName
                       | RuleNum   RuleID   RuleName ;
rules      RuleID    ::= ObjAttr ;
RName.     RuleName  ::= LangStrings ;
RNum.      RuleNum   ::= Integer;

RuleStanza.  Rule      ::= "RULE" RuleDef RuleBody;

RBNoop.    RuleBody  ::= "NOOP";

-- DEEM Item.isPotato AND Item.isVegetable WHEN ...
RBDeem.    RuleBody  ::= "DEEM" [ObjAttrAnd] "WHEN" PredExpr;
RBTOBE.    RuleBody  ::= "DEEM" ObjAttr "TOBE" ObjAttr "WHEN" PredExpr;
separator nonempty ObjAttrAnd "AND";
ObjAttrAnd1. ObjAttrAnd ::= ObjAttr ;

-- ... WHEN  
PEUnify.   PredExpr  ::= UnifyExpr;
PEAnd.     PredExpr  ::= PredExpr "AND" PredExpr;
PEOr.      PredExpr  ::= PredExpr "OR"  PredExpr;
PEME.      PredExpr1 ::= MatchExpr;
_.         PredExpr2 ::= "(" PredExpr ")";
coercions PredExpr 2;
-- do we really need to say coercions?

rules      UnifyExpr ::= [UnifyElem];
rules      UnifyElem ::= ObjAttrElem
                      |  UnifyBracket
                      |  UnifyStar;
separator nonempty UnifyElem ".";
rules      UnifyStar ::= "*" ;
rules      UnifyBracket ::= "[" CommaList "]" ;

rules      FancyBoolOp ::= PlainBoolOp Likelihood;

rules      PlainBoolOp ::= "AND" | "OR" ;

rules      Likelihood  ::= "" | "LIKELY" | "UNLIKELY";

-- need more cases -- junctionlists
ME_OA_JL.  MatchExpr  ::= UnifyExpr "~" JunctionList ;
ME_OA_Bin. MatchExpr  ::= UnifyExpr BinOp Numberlike ;
ME_True.   MatchExpr  ::= "True";
ME_False.  MatchExpr  ::= "False";

rules      BinOp      ::= "+" | "-" | "*" | "/" | "<" | ">" | "<=" | ">=" | "==";

rules      Numeric    ::= Integer | Double ;

rules      Numberlike   ::= "$" Numeric
                          | Numeric ;

JL_And.    JunctionList ::= "["   AndList "]" ;
JL_Or.     JunctionList ::= "["    OrList "]" ;
JL_Xor.    JunctionList ::= "["   XorList "]" ;
JL_Comma.  JunctionList ::= "[" CommaList "]" ;

-- some work to be done here -- the and, or, xor lists have to have at least 2 elements
-- if there's only one element it's a plain list

CommaList.  CommaList ::= [CommaElem];
rules      CommaElem ::= ObjAttr | String;
separator nonempty CommaElem ",";

AndList.   AndList ::= [AndElem];
rules      AndElem ::= ObjAttr | String;
separator nonempty AndElem "&";

XorList.   XorList ::= [XorElem];
rules      XorElem ::= ObjAttr | String;
separator nonempty XorElem "|";

OrList.    OrList ::= [OrElem];
rules      OrElem ::= ObjAttr | String;
separator nonempty OrElem "|";

rules      ObjAttrElem  ::= Ident | UIdent ;            -- Foo

OA_dots.   ObjAttr      ::= [ObjAttrElem];              -- Foo.Bar.Baz
OA_method. ObjAttr      ::= ObjAttr "(" CommaList ")" ; -- Foo.Bar(Baz, Quux)
separator nonempty ObjAttrElem ".";

rules      KeyVal     ::= ObjAttr ":" ObjAttr
                        | ObjAttr "=" ObjAttr
                        | ObjAttr "=" String
                        | ObjAttr "=" Numberlike
                        | ObjAttr "=" BraceList
                        | ObjAttr "=" ArrayOfBraces
                        | ObjAttr "=" JunctionList
                        | ObjAttr "=" DateTime 
                        | ObjAttr "=" DateTime "to" DateTime;
separator nonempty KeyVal ",";


EString.      NormalString ::= String ;
ELangStrings. LangStrings  ::= [LangString] ;
    separator nonempty LangString " ";
ELangString.  LangString   ::= LangLabel NormalString ;
rules         LangID       ::= ":" Ident ":";
token         LangLabel  ( ':' letter+ ('_' letter+)? ':') ;
    separator nonempty LangID "," ;
